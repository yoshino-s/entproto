// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	errors "github.com/go-errors/errors"
	ent "github.com/yoshino-s/entproto/test/ent"
	entpb "github.com/yoshino-s/entproto/test/proto/entpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ToProtoRepairSample transforms the ent type to the pb type
func ToProtoRepairSample(e *ent.RepairSample) (*entpb.RepairSample, error) {
	v := &entpb.RepairSample{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	extra := wrapperspb.String(e.Extra)
	v.Extra = extra
	id := int32(e.ID)
	v.Id = id
	language := e.Language
	v.Language = language
	original_code := e.OriginalCode
	v.OriginalCode = original_code
	repaired_code := e.RepairedCode
	v.RepairedCode = repaired_code
	rule_name := wrapperspb.String(e.RuleName)
	v.RuleName = rule_name
	task := int32(e.TaskID)
	v.TaskId = task
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	vul_type := e.VulType
	v.VulType = vul_type
	{
		x, err := ToProtoRepairSampleTagList(e.Edges.RepairSampleTags)
		if err != nil {
			return nil, err
		}
		v.RepairSampleTags = x
	}
	if edg := e.Edges.Task; edg != nil {
		x, err := ToProtoTask(edg)
		if err != nil {
			return nil, err
		}
		v.Task = x
	}
	return v, nil
}

func WrapProtoRepairSample(e *ent.RepairSample, err error) (*entpb.RepairSample, error) {
	switch {
	case err == nil:
		return ToProtoRepairSample(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}

// ToProtoRepairSampleList transforms a list of ent type to a list of pb type
func ToProtoRepairSampleList(e []*ent.RepairSample) ([]*entpb.RepairSample, error) {
	var pbList []*entpb.RepairSample
	for _, entEntity := range e {
		pbEntity, err := ToProtoRepairSample(entEntity)
		if err != nil {
			return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

func WrapProtoRepairSampleList(e []*ent.RepairSample, err error) ([]*entpb.RepairSample, error) {
	switch {
	case err == nil:
		return ToProtoRepairSampleList(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}
