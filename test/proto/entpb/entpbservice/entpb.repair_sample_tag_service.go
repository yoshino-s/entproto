// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	context "context"
	gen "entgo.io/ent/entc/gen"
	runtime "github.com/yoshino-s/entproto/runtime"
	ent "github.com/yoshino-s/entproto/test/ent"
	repairsampletag "github.com/yoshino-s/entproto/test/ent/repairsampletag"
	entpb "github.com/yoshino-s/entproto/test/proto/entpb"
	entpbconnect "github.com/yoshino-s/entproto/test/proto/entpb/entpbconnect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// RepairSampleTagService implements $connectHandler
type RepairSampleTagService struct {
	*runtime.BaseService
	*ent.Client
}

var _ entpbconnect.RepairSampleTagServiceHandler = (*RepairSampleTagService)(nil)

// NewRepairSampleTagService returns a new RepairSampleTagService
func NewRepairSampleTagService(client *ent.Client) *RepairSampleTagService {
	return &RepairSampleTagService{
		BaseService: runtime.NewBaseService(),
		Client:      client,
	}
}

// Create implements RepairSampleTagServiceServer.Create
func (svc *RepairSampleTagService) Create(ctx context.Context, req *connect.Request[entpb.RepairSampleTag]) (*connect.Response[entpb.RepairSampleTag], error) {
	repairsampletag := req.Msg
	m, err := svc.createBuilder(repairsampletag)
	if err != nil {
		return nil, err
	}

	if err := svc.RunHooks(ctx, runtime.ActionCreate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoRepairSampleTag(m.Save(ctx)))

}

// Get implements RepairSampleTagServiceServer.Get
func (svc *RepairSampleTagService) Get(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[entpb.RepairSampleTag], error) {

	query := svc.Client.RepairSampleTag.Query()
	query = query.Where(
		repairsampletag.ID(int(req.Msg.Value)),
	)

	if err := svc.RunHooks(ctx, runtime.ActionGet, req, query); err != nil {
		return nil, err
	}
	return runtime.WrapResult(WrapProtoRepairSampleTag(query.First(ctx)))

}

// Update implements RepairSampleTagServiceServer.Update
func (svc *RepairSampleTagService) Update(ctx context.Context, req *connect.Request[entpb.RepairSampleTag]) (*connect.Response[entpb.RepairSampleTag], error) {
	repairsampletag := req.Msg
	repairsampletagID := int(repairsampletag.GetId())
	m := svc.Client.RepairSampleTag.UpdateOneID(repairsampletagID)
	if repairsampletag.GetDetail() != nil {
		repairsampletagDetail := repairsampletag.GetDetail().GetValue()
		m.SetDetail(repairsampletagDetail)
	}
	repairsampletagRepairSampleID := int(repairsampletag.GetRepairSampleId())
	m.SetRepairSampleID(repairsampletagRepairSampleID)
	if repairsampletag.GetTagCategoryId() != nil {
		repairsampletagTagCategoryID := int(repairsampletag.GetTagCategoryId().GetValue())
		m.SetTagCategoryID(repairsampletagTagCategoryID)
	}
	repairsampletagType := toEntRepairSampleTag_Type(repairsampletag.GetType())
	m.SetType(repairsampletagType)
	if repairsampletag.GetUpdatedAt() != nil {
		repairsampletagUpdatedAt := runtime.ExtractTime(repairsampletag.GetUpdatedAt())
		m.SetUpdatedAt(repairsampletagUpdatedAt)
	}
	repairsampletagUserID := int(repairsampletag.GetUserId())
	m.SetUserID(repairsampletagUserID)
	if repairsampletag.GetRepairSample() != nil {
		repairsampletagRepairSample := int(repairsampletag.GetRepairSample().GetId())
		m.SetRepairSampleID(repairsampletagRepairSample)
	}
	if repairsampletag.GetTagCategory() != nil {
		repairsampletagTagCategory := int(repairsampletag.GetTagCategory().GetId())
		m.SetTagCategoryID(repairsampletagTagCategory)
	}
	if repairsampletag.GetUser() != nil {
		repairsampletagUser := int(repairsampletag.GetUser().GetId())
		m.SetUserID(repairsampletagUser)
	}

	if err := svc.RunHooks(ctx, runtime.ActionUpdate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoRepairSampleTag(m.Save(ctx)))

}

// Delete implements RepairSampleTagServiceServer.Delete
func (svc *RepairSampleTagService) Delete(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[emptypb.Empty], error) {

	query := svc.Client.RepairSampleTag.DeleteOneID(int(req.Msg.Value))
	if err := svc.RunHooks(ctx, runtime.ActionDelete, req, query); err != nil {
		return nil, err
	}

	if err := query.Exec(ctx); err != nil {
		return nil, wrapError(err)
	}
	return connect.NewResponse(&emptypb.Empty{}), nil

}

// List implements RepairSampleTagServiceServer.List
func (svc *RepairSampleTagService) List(ctx context.Context, req *connect.Request[entpb.ListRepairSampleTagRequest]) (*connect.Response[entpb.ListRepairSampleTagResponse], error) {

	query, totalQuery, err := svc.BuildListQuery(req)
	if err := svc.RunHooks(ctx, runtime.ActionList, req, query); err != nil {
		return nil, err
	}
	if err := svc.RunHooks(ctx, runtime.ActionListCount, req, totalQuery); err != nil {
		return nil, err
	}

	if err != nil {
		return nil, wrapError(err)
	}

	items, err := WrapProtoRepairSampleTagList(query.All(ctx))
	if err != nil {
		return nil, wrapError(err)
	}
	total, err := totalQuery.Count(ctx)
	if err != nil {
		return nil, wrapError(err)
	}

	return connect.NewResponse(&entpb.ListRepairSampleTagResponse{
		Items: items,
		Total: int32(total),
	}), nil

}

// List implements RepairSampleTagServiceServer.List
func (svc *RepairSampleTagService) BuildListQuery(req *connect.Request[entpb.ListRepairSampleTagRequest]) (*ent.RepairSampleTagQuery, *ent.RepairSampleTagQuery, error) {

	snake := gen.Funcs["snake"].(func(string) string)

	query := svc.Client.RepairSampleTag.Query()
	totalQuery := svc.Client.RepairSampleTag.Query()

	if req.Msg.Limit != nil && req.Msg.Limit.Value > 0 {
		query = query.Limit(int(req.Msg.Limit.Value))
	} else { // If no limit, set default limit
		query = query.Limit(10)
	}
	if req.Msg.Offset != nil {
		query = query.Offset(int(req.Msg.Offset.Value))
	}
	if req.Msg.Order != nil {
		OrderFunc := ent.Asc
		if req.Msg.Descending {
			OrderFunc = ent.Desc
		}
		query = query.Order(OrderFunc(snake(req.Msg.Order.Value)))
	}

	if req.Msg.Filter != nil {

		filterType := toEntRepairSampleTag_Type(req.Msg.Filter.GetType())
		query = query.Where(repairsampletag.TypeEQ(filterType))
		totalQuery = totalQuery.Where(repairsampletag.TypeEQ(filterType))
	}

	return query, totalQuery, nil

}

func (svc *RepairSampleTagService) createBuilder(repairsampletag *entpb.RepairSampleTag) (*ent.RepairSampleTagCreate, error) {
	m := svc.Client.RepairSampleTag.Create()
	if repairsampletag.GetCreatedAt() != nil {
		repairsampletagCreatedAt := runtime.ExtractTime(repairsampletag.GetCreatedAt())
		m.SetCreatedAt(repairsampletagCreatedAt)
	}
	if repairsampletag.GetDetail() != nil {
		repairsampletagDetail := repairsampletag.GetDetail().GetValue()
		m.SetDetail(repairsampletagDetail)
	}
	repairsampletagRepairSampleID := int(repairsampletag.GetRepairSampleId())
	m.SetRepairSampleID(repairsampletagRepairSampleID)
	if repairsampletag.GetTagCategoryId() != nil {
		repairsampletagTagCategoryID := int(repairsampletag.GetTagCategoryId().GetValue())
		m.SetTagCategoryID(repairsampletagTagCategoryID)
	}
	repairsampletagType := toEntRepairSampleTag_Type(repairsampletag.GetType())
	m.SetType(repairsampletagType)
	if repairsampletag.GetUpdatedAt() != nil {
		repairsampletagUpdatedAt := runtime.ExtractTime(repairsampletag.GetUpdatedAt())
		m.SetUpdatedAt(repairsampletagUpdatedAt)
	}
	repairsampletagUserID := int(repairsampletag.GetUserId())
	m.SetUserID(repairsampletagUserID)
	if repairsampletag.GetRepairSample() != nil {
		repairsampletagRepairSample := int(repairsampletag.GetRepairSample().GetId())
		m.SetRepairSampleID(repairsampletagRepairSample)
	}
	if repairsampletag.GetTagCategory() != nil {
		repairsampletagTagCategory := int(repairsampletag.GetTagCategory().GetId())
		m.SetTagCategoryID(repairsampletagTagCategory)
	}
	if repairsampletag.GetUser() != nil {
		repairsampletagUser := int(repairsampletag.GetUser().GetId())
		m.SetUserID(repairsampletagUser)
	}
	return m, nil
}
