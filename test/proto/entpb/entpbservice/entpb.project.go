// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	errors "github.com/go-errors/errors"
	ent "github.com/yoshino-s/entproto/test/ent"
	entpb "github.com/yoshino-s/entproto/test/proto/entpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ToProtoProject transforms the ent type to the pb type
func ToProtoProject(e *ent.Project) (*entpb.Project, error) {
	v := &entpb.Project{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	description := wrapperspb.String(e.Description)
	v.Description = description
	id := int32(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	{
		x, err := ToProtoTaskList(e.Edges.Tasks)
		if err != nil {
			return nil, err
		}
		v.Tasks = x
	}
	return v, nil
}

func WrapProtoProject(e *ent.Project, err error) (*entpb.Project, error) {
	switch {
	case err == nil:
		return ToProtoProject(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}

// ToProtoProjectList transforms a list of ent type to a list of pb type
func ToProtoProjectList(e []*ent.Project) ([]*entpb.Project, error) {
	var pbList []*entpb.Project
	for _, entEntity := range e {
		pbEntity, err := ToProtoProject(entEntity)
		if err != nil {
			return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

func WrapProtoProjectList(e []*ent.Project, err error) ([]*entpb.Project, error) {
	switch {
	case err == nil:
		return ToProtoProjectList(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}
