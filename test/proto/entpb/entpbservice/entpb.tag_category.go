// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	errors "github.com/go-errors/errors"
	ent "github.com/yoshino-s/entproto/test/ent"
	tagcategory "github.com/yoshino-s/entproto/test/ent/tagcategory"
	entpb "github.com/yoshino-s/entproto/test/proto/entpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	regexp "regexp"
	strings "strings"
)

var protoIdentNormalizeRegexpTagCategory_Type = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeTagCategory_Type(e string) string {
	return protoIdentNormalizeRegexpTagCategory_Type.ReplaceAllString(e, "_")
}

func toProtoTagCategory_Type(e tagcategory.Type) entpb.TagCategory_Type {
	if v, ok := entpb.TagCategory_Type_value[strings.ToUpper("TYPE_"+protoIdentNormalizeTagCategory_Type(string(e)))]; ok {
		return entpb.TagCategory_Type(v)
	}
	return entpb.TagCategory_Type(0)
}

func toEntTagCategory_Type(e entpb.TagCategory_Type) tagcategory.Type {
	if v, ok := entpb.TagCategory_Type_name[int32(e)]; ok {
		entVal := map[string]string{
			"TYPE_REPAIR_SAMPLE": "repair_sample",
		}[v]
		return tagcategory.Type(entVal)
	}
	return ""
}

// ToProtoTagCategory transforms the ent type to the pb type
func ToProtoTagCategory(e *ent.TagCategory) (*entpb.TagCategory, error) {
	v := &entpb.TagCategory{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	description := wrapperspb.String(e.Description)
	v.Description = description
	id := int32(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	_type := toProtoTagCategory_Type(e.Type)
	v.Type = _type
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	return v, nil
}

func WrapProtoTagCategory(e *ent.TagCategory, err error) (*entpb.TagCategory, error) {
	switch {
	case err == nil:
		return ToProtoTagCategory(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}

// ToProtoTagCategoryList transforms a list of ent type to a list of pb type
func ToProtoTagCategoryList(e []*ent.TagCategory) ([]*entpb.TagCategory, error) {
	var pbList []*entpb.TagCategory
	for _, entEntity := range e {
		pbEntity, err := ToProtoTagCategory(entEntity)
		if err != nil {
			return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

func WrapProtoTagCategoryList(e []*ent.TagCategory, err error) ([]*entpb.TagCategory, error) {
	switch {
	case err == nil:
		return ToProtoTagCategoryList(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}
