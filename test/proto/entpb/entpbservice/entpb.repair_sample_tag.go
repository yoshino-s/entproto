// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	errors "github.com/go-errors/errors"
	ent "github.com/yoshino-s/entproto/test/ent"
	repairsampletag "github.com/yoshino-s/entproto/test/ent/repairsampletag"
	entpb "github.com/yoshino-s/entproto/test/proto/entpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	regexp "regexp"
	strings "strings"
)

var protoIdentNormalizeRegexpRepairSampleTag_Type = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeRepairSampleTag_Type(e string) string {
	return protoIdentNormalizeRegexpRepairSampleTag_Type.ReplaceAllString(e, "_")
}

func toProtoRepairSampleTag_Type(e repairsampletag.Type) entpb.RepairSampleTag_Type {
	if v, ok := entpb.RepairSampleTag_Type_value[strings.ToUpper("TYPE_"+protoIdentNormalizeRepairSampleTag_Type(string(e)))]; ok {
		return entpb.RepairSampleTag_Type(v)
	}
	return entpb.RepairSampleTag_Type(0)
}

func toEntRepairSampleTag_Type(e entpb.RepairSampleTag_Type) repairsampletag.Type {
	if v, ok := entpb.RepairSampleTag_Type_name[int32(e)]; ok {
		entVal := map[string]string{
			"TYPE_SUCCESS":    "success",
			"TYPE_WARNING":    "warning",
			"TYPE_ERROR":      "error",
			"TYPE_DEPRECATED": "deprecated",
		}[v]
		return repairsampletag.Type(entVal)
	}
	return ""
}

// ToProtoRepairSampleTag transforms the ent type to the pb type
func ToProtoRepairSampleTag(e *ent.RepairSampleTag) (*entpb.RepairSampleTag, error) {
	v := &entpb.RepairSampleTag{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	detail := wrapperspb.String(e.Detail)
	v.Detail = detail
	id := int32(e.ID)
	v.Id = id
	repair_sample := int32(e.RepairSampleID)
	v.RepairSampleId = repair_sample
	tag_category := wrapperspb.Int32(int32(e.TagCategoryID))
	v.TagCategoryId = tag_category
	_type := toProtoRepairSampleTag_Type(e.Type)
	v.Type = _type
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	user := int32(e.UserID)
	v.UserId = user
	if edg := e.Edges.RepairSample; edg != nil {
		x, err := ToProtoRepairSample(edg)
		if err != nil {
			return nil, err
		}
		v.RepairSample = x
	}
	if edg := e.Edges.TagCategory; edg != nil {
		x, err := ToProtoTagCategory(edg)
		if err != nil {
			return nil, err
		}
		v.TagCategory = x
	}
	if edg := e.Edges.User; edg != nil {
		x, err := ToProtoUser(edg)
		if err != nil {
			return nil, err
		}
		v.User = x
	}
	return v, nil
}

func WrapProtoRepairSampleTag(e *ent.RepairSampleTag, err error) (*entpb.RepairSampleTag, error) {
	switch {
	case err == nil:
		return ToProtoRepairSampleTag(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}

// ToProtoRepairSampleTagList transforms a list of ent type to a list of pb type
func ToProtoRepairSampleTagList(e []*ent.RepairSampleTag) ([]*entpb.RepairSampleTag, error) {
	var pbList []*entpb.RepairSampleTag
	for _, entEntity := range e {
		pbEntity, err := ToProtoRepairSampleTag(entEntity)
		if err != nil {
			return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

func WrapProtoRepairSampleTagList(e []*ent.RepairSampleTag, err error) ([]*entpb.RepairSampleTag, error) {
	switch {
	case err == nil:
		return ToProtoRepairSampleTagList(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}
