// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	errors "github.com/go-errors/errors"
	ent "github.com/yoshino-s/entproto/test/ent"
	entpb "github.com/yoshino-s/entproto/test/proto/entpb"
)

// ToProtoGroup transforms the ent type to the pb type
func ToProtoGroup(e *ent.Group) (*entpb.Group, error) {
	v := &entpb.Group{}
	id := int32(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	{
		x, err := ToProtoUserList(e.Edges.Users)
		if err != nil {
			return nil, err
		}
		v.Users = x
	}
	return v, nil
}

func WrapProtoGroup(e *ent.Group, err error) (*entpb.Group, error) {
	switch {
	case err == nil:
		return ToProtoGroup(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}

// ToProtoGroupList transforms a list of ent type to a list of pb type
func ToProtoGroupList(e []*ent.Group) ([]*entpb.Group, error) {
	var pbList []*entpb.Group
	for _, entEntity := range e {
		pbEntity, err := ToProtoGroup(entEntity)
		if err != nil {
			return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

func WrapProtoGroupList(e []*ent.Group, err error) ([]*entpb.Group, error) {
	switch {
	case err == nil:
		return ToProtoGroupList(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}
