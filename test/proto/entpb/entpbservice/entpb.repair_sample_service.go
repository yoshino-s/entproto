// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	context "context"
	gen "entgo.io/ent/entc/gen"
	runtime "github.com/yoshino-s/entproto/runtime"
	ent "github.com/yoshino-s/entproto/test/ent"
	repairsample "github.com/yoshino-s/entproto/test/ent/repairsample"
	entpb "github.com/yoshino-s/entproto/test/proto/entpb"
	entpbconnect "github.com/yoshino-s/entproto/test/proto/entpb/entpbconnect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// RepairSampleService implements $connectHandler
type RepairSampleService struct {
	*runtime.BaseService
	*ent.Client
}

var _ entpbconnect.RepairSampleServiceHandler = (*RepairSampleService)(nil)

// NewRepairSampleService returns a new RepairSampleService
func NewRepairSampleService(client *ent.Client) *RepairSampleService {
	return &RepairSampleService{
		BaseService: runtime.NewBaseService(),
		Client:      client,
	}
}

// Create implements RepairSampleServiceServer.Create
func (svc *RepairSampleService) Create(ctx context.Context, req *connect.Request[entpb.RepairSample]) (*connect.Response[entpb.RepairSample], error) {
	repairsample := req.Msg
	m, err := svc.createBuilder(repairsample)
	if err != nil {
		return nil, err
	}

	if err := svc.RunHooks(ctx, runtime.ActionCreate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoRepairSample(m.Save(ctx)))

}

// Get implements RepairSampleServiceServer.Get
func (svc *RepairSampleService) Get(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[entpb.RepairSample], error) {

	query := svc.Client.RepairSample.Query()
	query = query.Where(
		repairsample.ID(int(req.Msg.Value)),
	)

	if err := svc.RunHooks(ctx, runtime.ActionGet, req, query); err != nil {
		return nil, err
	}
	return runtime.WrapResult(WrapProtoRepairSample(query.First(ctx)))

}

// Update implements RepairSampleServiceServer.Update
func (svc *RepairSampleService) Update(ctx context.Context, req *connect.Request[entpb.RepairSample]) (*connect.Response[entpb.RepairSample], error) {
	repairsample := req.Msg
	repairsampleID := int(repairsample.GetId())
	m := svc.Client.RepairSample.UpdateOneID(repairsampleID)
	if repairsample.GetExtra() != nil {
		repairsampleExtra := repairsample.GetExtra().GetValue()
		m.SetExtra(repairsampleExtra)
	}
	repairsampleLanguage := repairsample.GetLanguage()
	m.SetLanguage(repairsampleLanguage)
	repairsampleOriginalCode := repairsample.GetOriginalCode()
	m.SetOriginalCode(repairsampleOriginalCode)
	repairsampleRepairedCode := repairsample.GetRepairedCode()
	m.SetRepairedCode(repairsampleRepairedCode)
	if repairsample.GetRuleName() != nil {
		repairsampleRuleName := repairsample.GetRuleName().GetValue()
		m.SetRuleName(repairsampleRuleName)
	}
	repairsampleTaskID := int(repairsample.GetTaskId())
	m.SetTaskID(repairsampleTaskID)
	if repairsample.GetUpdatedAt() != nil {
		repairsampleUpdatedAt := runtime.ExtractTime(repairsample.GetUpdatedAt())
		m.SetUpdatedAt(repairsampleUpdatedAt)
	}
	repairsampleVulType := repairsample.GetVulType()
	m.SetVulType(repairsampleVulType)
	for _, item := range repairsample.GetRepairSampleTags() {
		repairsampletags := int(item.GetId())
		m.AddRepairSampleTagIDs(repairsampletags)
	}
	if repairsample.GetTask() != nil {
		repairsampleTask := int(repairsample.GetTask().GetId())
		m.SetTaskID(repairsampleTask)
	}

	if err := svc.RunHooks(ctx, runtime.ActionUpdate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoRepairSample(m.Save(ctx)))

}

// Delete implements RepairSampleServiceServer.Delete
func (svc *RepairSampleService) Delete(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[emptypb.Empty], error) {

	query := svc.Client.RepairSample.DeleteOneID(int(req.Msg.Value))
	if err := svc.RunHooks(ctx, runtime.ActionDelete, req, query); err != nil {
		return nil, err
	}

	if err := query.Exec(ctx); err != nil {
		return nil, wrapError(err)
	}
	return connect.NewResponse(&emptypb.Empty{}), nil

}

// List implements RepairSampleServiceServer.List
func (svc *RepairSampleService) List(ctx context.Context, req *connect.Request[entpb.ListRepairSampleRequest]) (*connect.Response[entpb.ListRepairSampleResponse], error) {

	query, totalQuery, err := svc.BuildListQuery(req)
	if err := svc.RunHooks(ctx, runtime.ActionList, req, query); err != nil {
		return nil, err
	}
	if err := svc.RunHooks(ctx, runtime.ActionListCount, req, totalQuery); err != nil {
		return nil, err
	}

	if err != nil {
		return nil, wrapError(err)
	}

	items, err := WrapProtoRepairSampleList(query.All(ctx))
	if err != nil {
		return nil, wrapError(err)
	}
	total, err := totalQuery.Count(ctx)
	if err != nil {
		return nil, wrapError(err)
	}

	return connect.NewResponse(&entpb.ListRepairSampleResponse{
		Items: items,
		Total: int32(total),
	}), nil

}

// List implements RepairSampleServiceServer.List
func (svc *RepairSampleService) BuildListQuery(req *connect.Request[entpb.ListRepairSampleRequest]) (*ent.RepairSampleQuery, *ent.RepairSampleQuery, error) {

	snake := gen.Funcs["snake"].(func(string) string)

	query := svc.Client.RepairSample.Query()
	totalQuery := svc.Client.RepairSample.Query()

	if req.Msg.Limit != nil && req.Msg.Limit.Value > 0 {
		query = query.Limit(int(req.Msg.Limit.Value))
	} else { // If no limit, set default limit
		query = query.Limit(10)
	}
	if req.Msg.Offset != nil {
		query = query.Offset(int(req.Msg.Offset.Value))
	}
	if req.Msg.Order != nil {
		OrderFunc := ent.Asc
		if req.Msg.Descending {
			OrderFunc = ent.Desc
		}
		query = query.Order(OrderFunc(snake(req.Msg.Order.Value)))
	}

	if req.Msg.Filter != nil {

		if req.Msg.Filter.GetLanguage() != nil {
			filterLanguage := req.Msg.Filter.GetLanguage().GetValue()
			query = query.Where(repairsample.LanguageEQ(filterLanguage))
			totalQuery = totalQuery.Where(repairsample.LanguageEQ(filterLanguage))
		}

		if req.Msg.Filter.GetVulType() != nil {
			filterVulType := req.Msg.Filter.GetVulType().GetValue()
			query = query.Where(repairsample.VulTypeEQ(filterVulType))
			totalQuery = totalQuery.Where(repairsample.VulTypeEQ(filterVulType))
		}

		if req.Msg.Filter.GetRuleName() != nil {
			filterRuleName := req.Msg.Filter.GetRuleName().GetValue()
			query = query.Where(repairsample.RuleNameEQ(filterRuleName))
			totalQuery = totalQuery.Where(repairsample.RuleNameEQ(filterRuleName))
		}

		if req.Msg.Filter.GetOriginalCode() != nil {
			filterOriginalCode := req.Msg.Filter.GetOriginalCode().GetValue()
			query = query.Where(repairsample.OriginalCodeEQ(filterOriginalCode))
			totalQuery = totalQuery.Where(repairsample.OriginalCodeEQ(filterOriginalCode))
		}

		if req.Msg.Filter.GetRepairedCode() != nil {
			filterRepairedCode := req.Msg.Filter.GetRepairedCode().GetValue()
			query = query.Where(repairsample.RepairedCodeEQ(filterRepairedCode))
			totalQuery = totalQuery.Where(repairsample.RepairedCodeEQ(filterRepairedCode))
		}

		if req.Msg.Filter.GetTaskId() != nil {
			filterTaskId := int(req.Msg.Filter.GetTaskId().GetValue())
			query = query.Where(repairsample.TaskIDEQ(filterTaskId))
			totalQuery = totalQuery.Where(repairsample.TaskIDEQ(filterTaskId))
		}
	}

	return query, totalQuery, nil

}

func (svc *RepairSampleService) createBuilder(repairsample *entpb.RepairSample) (*ent.RepairSampleCreate, error) {
	m := svc.Client.RepairSample.Create()
	if repairsample.GetCreatedAt() != nil {
		repairsampleCreatedAt := runtime.ExtractTime(repairsample.GetCreatedAt())
		m.SetCreatedAt(repairsampleCreatedAt)
	}
	if repairsample.GetExtra() != nil {
		repairsampleExtra := repairsample.GetExtra().GetValue()
		m.SetExtra(repairsampleExtra)
	}
	repairsampleLanguage := repairsample.GetLanguage()
	m.SetLanguage(repairsampleLanguage)
	repairsampleOriginalCode := repairsample.GetOriginalCode()
	m.SetOriginalCode(repairsampleOriginalCode)
	repairsampleRepairedCode := repairsample.GetRepairedCode()
	m.SetRepairedCode(repairsampleRepairedCode)
	if repairsample.GetRuleName() != nil {
		repairsampleRuleName := repairsample.GetRuleName().GetValue()
		m.SetRuleName(repairsampleRuleName)
	}
	repairsampleTaskID := int(repairsample.GetTaskId())
	m.SetTaskID(repairsampleTaskID)
	if repairsample.GetUpdatedAt() != nil {
		repairsampleUpdatedAt := runtime.ExtractTime(repairsample.GetUpdatedAt())
		m.SetUpdatedAt(repairsampleUpdatedAt)
	}
	repairsampleVulType := repairsample.GetVulType()
	m.SetVulType(repairsampleVulType)
	for _, item := range repairsample.GetRepairSampleTags() {
		repairsampletags := int(item.GetId())
		m.AddRepairSampleTagIDs(repairsampletags)
	}
	if repairsample.GetTask() != nil {
		repairsampleTask := int(repairsample.GetTask().GetId())
		m.SetTaskID(repairsampleTask)
	}
	return m, nil
}
