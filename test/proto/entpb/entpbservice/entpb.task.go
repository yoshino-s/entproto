// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	errors "github.com/go-errors/errors"
	ent "github.com/yoshino-s/entproto/test/ent"
	task "github.com/yoshino-s/entproto/test/ent/task"
	entpb "github.com/yoshino-s/entproto/test/proto/entpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	regexp "regexp"
	strings "strings"
)

var protoIdentNormalizeRegexpTask_Stage = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeTask_Stage(e string) string {
	return protoIdentNormalizeRegexpTask_Stage.ReplaceAllString(e, "_")
}

func toProtoTask_Stage(e task.Stage) entpb.Task_Stage {
	if v, ok := entpb.Task_Stage_value[strings.ToUpper("STAGE_"+protoIdentNormalizeTask_Stage(string(e)))]; ok {
		return entpb.Task_Stage(v)
	}
	return entpb.Task_Stage(0)
}

func toEntTask_Stage(e entpb.Task_Stage) task.Stage {
	if v, ok := entpb.Task_Stage_name[int32(e)]; ok {
		entVal := map[string]string{
			"STAGE_DEVELOPMENT": "development",
			"STAGE_PRODUCTION":  "production",
		}[v]
		return task.Stage(entVal)
	}
	return ""
}

// ToProtoTask transforms the ent type to the pb type
func ToProtoTask(e *ent.Task) (*entpb.Task, error) {
	v := &entpb.Task{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	description := wrapperspb.String(e.Description)
	v.Description = description
	id := int32(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	project := int32(e.ProjectID)
	v.ProjectId = project
	stage := toProtoTask_Stage(e.Stage)
	v.Stage = stage
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	if edg := e.Edges.Project; edg != nil {
		x, err := ToProtoProject(edg)
		if err != nil {
			return nil, err
		}
		v.Project = x
	}
	{
		x, err := ToProtoRepairSampleList(e.Edges.RepairSamples)
		if err != nil {
			return nil, err
		}
		v.RepairSamples = x
	}
	return v, nil
}

func WrapProtoTask(e *ent.Task, err error) (*entpb.Task, error) {
	switch {
	case err == nil:
		return ToProtoTask(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}

// ToProtoTaskList transforms a list of ent type to a list of pb type
func ToProtoTaskList(e []*ent.Task) ([]*entpb.Task, error) {
	var pbList []*entpb.Task
	for _, entEntity := range e {
		pbEntity, err := ToProtoTask(entEntity)
		if err != nil {
			return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

func WrapProtoTaskList(e []*ent.Task, err error) ([]*entpb.Task, error) {
	switch {
	case err == nil:
		return ToProtoTaskList(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}
