// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	context "context"
	gen "entgo.io/ent/entc/gen"
	runtime "github.com/yoshino-s/entproto/runtime"
	ent "github.com/yoshino-s/entproto/test/ent"
	task "github.com/yoshino-s/entproto/test/ent/task"
	entpb "github.com/yoshino-s/entproto/test/proto/entpb"
	entpbconnect "github.com/yoshino-s/entproto/test/proto/entpb/entpbconnect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// TaskService implements $connectHandler
type TaskService struct {
	*runtime.BaseService
	*ent.Client
}

var _ entpbconnect.TaskServiceHandler = (*TaskService)(nil)

// NewTaskService returns a new TaskService
func NewTaskService(client *ent.Client) *TaskService {
	return &TaskService{
		BaseService: runtime.NewBaseService(),
		Client:      client,
	}
}

// Create implements TaskServiceServer.Create
func (svc *TaskService) Create(ctx context.Context, req *connect.Request[entpb.Task]) (*connect.Response[entpb.Task], error) {
	task := req.Msg
	m, err := svc.createBuilder(task)
	if err != nil {
		return nil, err
	}

	if err := svc.RunHooks(ctx, runtime.ActionCreate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoTask(m.Save(ctx)))

}

// Get implements TaskServiceServer.Get
func (svc *TaskService) Get(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[entpb.Task], error) {

	query := svc.Client.Task.Query()
	query = query.Where(
		task.ID(int(req.Msg.Value)),
	)

	if err := svc.RunHooks(ctx, runtime.ActionGet, req, query); err != nil {
		return nil, err
	}
	return runtime.WrapResult(WrapProtoTask(query.First(ctx)))

}

// Update implements TaskServiceServer.Update
func (svc *TaskService) Update(ctx context.Context, req *connect.Request[entpb.Task]) (*connect.Response[entpb.Task], error) {
	task := req.Msg
	taskID := int(task.GetId())
	m := svc.Client.Task.UpdateOneID(taskID)
	if task.GetDescription() != nil {
		taskDescription := task.GetDescription().GetValue()
		m.SetDescription(taskDescription)
	}
	taskName := task.GetName()
	m.SetName(taskName)
	taskProjectID := int(task.GetProjectId())
	m.SetProjectID(taskProjectID)
	taskStage := toEntTask_Stage(task.GetStage())
	m.SetStage(taskStage)
	if task.GetUpdatedAt() != nil {
		taskUpdatedAt := runtime.ExtractTime(task.GetUpdatedAt())
		m.SetUpdatedAt(taskUpdatedAt)
	}
	if task.GetProject() != nil {
		taskProject := int(task.GetProject().GetId())
		m.SetProjectID(taskProject)
	}
	for _, item := range task.GetRepairSamples() {
		repairsamples := int(item.GetId())
		m.AddRepairSampleIDs(repairsamples)
	}

	if err := svc.RunHooks(ctx, runtime.ActionUpdate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoTask(m.Save(ctx)))

}

// Delete implements TaskServiceServer.Delete
func (svc *TaskService) Delete(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[emptypb.Empty], error) {

	query := svc.Client.Task.DeleteOneID(int(req.Msg.Value))
	if err := svc.RunHooks(ctx, runtime.ActionDelete, req, query); err != nil {
		return nil, err
	}

	if err := query.Exec(ctx); err != nil {
		return nil, wrapError(err)
	}
	return connect.NewResponse(&emptypb.Empty{}), nil

}

// List implements TaskServiceServer.List
func (svc *TaskService) List(ctx context.Context, req *connect.Request[entpb.ListTaskRequest]) (*connect.Response[entpb.ListTaskResponse], error) {

	query, totalQuery, err := svc.BuildListQuery(req)
	if err := svc.RunHooks(ctx, runtime.ActionList, req, query); err != nil {
		return nil, err
	}
	if err := svc.RunHooks(ctx, runtime.ActionListCount, req, totalQuery); err != nil {
		return nil, err
	}

	if err != nil {
		return nil, wrapError(err)
	}

	items, err := WrapProtoTaskList(query.All(ctx))
	if err != nil {
		return nil, wrapError(err)
	}
	total, err := totalQuery.Count(ctx)
	if err != nil {
		return nil, wrapError(err)
	}

	return connect.NewResponse(&entpb.ListTaskResponse{
		Items: items,
		Total: int32(total),
	}), nil

}

// List implements TaskServiceServer.List
func (svc *TaskService) BuildListQuery(req *connect.Request[entpb.ListTaskRequest]) (*ent.TaskQuery, *ent.TaskQuery, error) {

	snake := gen.Funcs["snake"].(func(string) string)

	query := svc.Client.Task.Query()
	totalQuery := svc.Client.Task.Query()

	if req.Msg.Limit != nil && req.Msg.Limit.Value > 0 {
		query = query.Limit(int(req.Msg.Limit.Value))
	} else { // If no limit, set default limit
		query = query.Limit(10)
	}
	if req.Msg.Offset != nil {
		query = query.Offset(int(req.Msg.Offset.Value))
	}
	if req.Msg.Order != nil {
		OrderFunc := ent.Asc
		if req.Msg.Descending {
			OrderFunc = ent.Desc
		}
		query = query.Order(OrderFunc(snake(req.Msg.Order.Value)))
	}

	if req.Msg.Filter != nil {

		if req.Msg.Filter.GetNameContains() != nil {
			filterNameContains := req.Msg.Filter.GetNameContains().GetValue()
			query = query.Where(task.NameContains(filterNameContains))
			totalQuery = totalQuery.Where(task.NameContains(filterNameContains))
		}

		if req.Msg.Filter.GetProjectId() != nil {
			filterProjectId := int(req.Msg.Filter.GetProjectId().GetValue())
			query = query.Where(task.ProjectIDEQ(filterProjectId))
			totalQuery = totalQuery.Where(task.ProjectIDEQ(filterProjectId))
		}
	}

	return query, totalQuery, nil

}

func (svc *TaskService) createBuilder(task *entpb.Task) (*ent.TaskCreate, error) {
	m := svc.Client.Task.Create()
	if task.GetCreatedAt() != nil {
		taskCreatedAt := runtime.ExtractTime(task.GetCreatedAt())
		m.SetCreatedAt(taskCreatedAt)
	}
	if task.GetDescription() != nil {
		taskDescription := task.GetDescription().GetValue()
		m.SetDescription(taskDescription)
	}
	taskName := task.GetName()
	m.SetName(taskName)
	taskProjectID := int(task.GetProjectId())
	m.SetProjectID(taskProjectID)
	taskStage := toEntTask_Stage(task.GetStage())
	m.SetStage(taskStage)
	if task.GetUpdatedAt() != nil {
		taskUpdatedAt := runtime.ExtractTime(task.GetUpdatedAt())
		m.SetUpdatedAt(taskUpdatedAt)
	}
	if task.GetProject() != nil {
		taskProject := int(task.GetProject().GetId())
		m.SetProjectID(taskProject)
	}
	for _, item := range task.GetRepairSamples() {
		repairsamples := int(item.GetId())
		m.AddRepairSampleIDs(repairsamples)
	}
	return m, nil
}
