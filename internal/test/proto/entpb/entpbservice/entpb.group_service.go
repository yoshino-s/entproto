// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	context "context"
	gen "entgo.io/ent/entc/gen"
	ent "github.com/yoshino-s/entproto/internal/test/ent"
	group "github.com/yoshino-s/entproto/internal/test/ent/group"
	entpb "github.com/yoshino-s/entproto/internal/test/proto/entpb"
	entpbconnect "github.com/yoshino-s/entproto/internal/test/proto/entpb/entpbconnect"
	runtime "github.com/yoshino-s/entproto/runtime"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// GroupService implements $connectHandler
type GroupService struct {
	*runtime.BaseService
	*ent.Client
}

var _ entpbconnect.GroupServiceHandler = (*GroupService)(nil)

// NewGroupService returns a new GroupService
func NewGroupService(client *ent.Client) *GroupService {
	return &GroupService{
		BaseService: runtime.NewBaseService(),
		Client:      client,
	}
}

// Create implements GroupServiceServer.Create
func (svc *GroupService) Create(ctx context.Context, req *connect.Request[entpb.Group]) (*connect.Response[entpb.Group], error) {
	group := req.Msg
	m, err := svc.createBuilder(group)
	if err != nil {
		return nil, err
	}

	if err := svc.RunHooks(ctx, runtime.ActionCreate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoGroup(m.Save(ctx)))

}

// Get implements GroupServiceServer.Get
func (svc *GroupService) Get(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[entpb.Group], error) {

	query := svc.Client.Group.Query()
	query = query.Where(
		group.ID(int(req.Msg.Value)),
	)

	if err := svc.RunHooks(ctx, runtime.ActionGet, req, query); err != nil {
		return nil, err
	}
	return runtime.WrapResult(WrapProtoGroup(query.First(ctx)))

}

// Update implements GroupServiceServer.Update
func (svc *GroupService) Update(ctx context.Context, req *connect.Request[entpb.Group]) (*connect.Response[entpb.Group], error) {
	group := req.Msg
	groupID := int(group.GetId())
	m := svc.Client.Group.UpdateOneID(groupID)
	groupName := group.GetName()
	m.SetName(groupName)
	for _, item := range group.GetUsers() {
		users := int(item.GetId())
		m.AddUserIDs(users)
	}

	if err := svc.RunHooks(ctx, runtime.ActionUpdate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoGroup(m.Save(ctx)))

}

// Delete implements GroupServiceServer.Delete
func (svc *GroupService) Delete(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[emptypb.Empty], error) {

	query := svc.Client.Group.DeleteOneID(int(req.Msg.Value))
	if err := svc.RunHooks(ctx, runtime.ActionDelete, req, query); err != nil {
		return nil, err
	}

	if err := query.Exec(ctx); err != nil {
		return nil, wrapError(err)
	}
	return connect.NewResponse(&emptypb.Empty{}), nil

}

// List implements GroupServiceServer.List
func (svc *GroupService) List(ctx context.Context, req *connect.Request[entpb.ListGroupRequest]) (*connect.Response[entpb.ListGroupResponse], error) {

	query, totalQuery, err := svc.BuildListQuery(ctx, req)

	if err != nil {
		return nil, wrapError(err)
	}

	items, err := WrapProtoGroupList(query.All(ctx))
	if err != nil {
		return nil, wrapError(err)
	}
	total, err := totalQuery.Count(ctx)
	if err != nil {
		return nil, wrapError(err)
	}

	return connect.NewResponse(&entpb.ListGroupResponse{
		Items: items,
		Total: int32(total),
	}), nil

}

// List implements GroupServiceServer.List
func (svc *GroupService) BuildListQuery(ctx context.Context, req *connect.Request[entpb.ListGroupRequest]) (*ent.GroupQuery, *ent.GroupQuery, error) {

	snake := gen.Funcs["snake"].(func(string) string)

	query := svc.Client.Group.Query()
	totalQuery := svc.Client.Group.Query()

	if !req.Msg.NoLimit {
		if req.Msg.Limit != nil && req.Msg.Limit.Value > 0 {
			query = query.Limit(int(req.Msg.Limit.Value))
		} else { // If no limit, set default limit
			query = query.Limit(10)
		}
	}
	if req.Msg.Offset != nil {
		query = query.Offset(int(req.Msg.Offset.Value))
	}
	if req.Msg.Order != nil {
		OrderFunc := ent.Asc
		if req.Msg.Descending {
			OrderFunc = ent.Desc
		}
		query = query.Order(OrderFunc(snake(req.Msg.Order.Value)))
	}

	if req.Msg.Filter != nil {
	}

	if err := svc.RunHooks(ctx, runtime.ActionList, req, query); err != nil {
		return nil, nil, err
	}
	if err := svc.RunHooks(ctx, runtime.ActionListCount, req, totalQuery); err != nil {
		return nil, nil, err
	}

	return query, totalQuery, nil

}

func (svc *GroupService) createBuilder(group *entpb.Group) (*ent.GroupCreate, error) {
	m := svc.Client.Group.Create()
	groupName := group.GetName()
	m.SetName(groupName)
	for _, item := range group.GetUsers() {
		users := int(item.GetId())
		m.AddUserIDs(users)
	}
	return m, nil
}
