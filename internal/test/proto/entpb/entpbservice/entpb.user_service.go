// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	context "context"
	ent "github.com/yoshino-s/entproto/internal/test/ent"
	entpb "github.com/yoshino-s/entproto/internal/test/proto/entpb"
	entpbconnect "github.com/yoshino-s/entproto/internal/test/proto/entpb/entpbconnect"
	runtime "github.com/yoshino-s/entproto/runtime"
)

// UserServiceHandler implements $connectHandler
type UserServiceHandler struct {
	*runtime.BaseService
	*ent.Client
}

var _ entpbconnect.UserServiceHandler = (*UserServiceHandler)(nil)

// NewUserServiceHandler returns a new UserServiceHandler
func NewUserServiceHandler(client *ent.Client) *UserServiceHandler {
	return &UserServiceHandler{
		BaseService: runtime.NewBaseService(),
		Client:      client,
	}
}

// Update implements UserServiceHandlerServer.Update
func (svc *UserServiceHandler) Update(ctx context.Context, req *connect.Request[entpb.UpdateUserRequest]) (*connect.Response[entpb.User], error) {
	user := req.Msg
	userID := int(user.GetId())
	m := svc.Client.User.UpdateOneID(userID)
	if user.GetDescription() != nil {
		userDescription := user.GetDescription().GetValue()
		m.SetDescription(userDescription)
	}
	if user.GetGender() != nil {
		userGender := toEntUser_Gender(user.GetGender().GetValue())
		m.SetGender(userGender)
	}
	if user.GetGroupId() != nil {
		userGroupID := int(user.GetGroupId().GetValue())
		m.SetGroupID(userGroupID)
	}
	if user.GetName() != nil {
		userName := user.GetName().GetValue()
		m.SetName(userName)
	}
	if user.GetGroup() != nil {
		userGroup := int(user.GetGroup().GetId())
		m.SetGroupID(userGroup)
	}

	if err := svc.RunHooks(ctx, runtime.ActionUpdate, req, m); err != nil {
		return nil, err
	}

	res, err := runtime.WrapResult(WrapProtoUser(m.Save(ctx)))
	if err != nil {
		return nil, err
	}
	if err := svc.RunHooksAfter(ctx, runtime.ActionAfterUpdate, req, res); err != nil {
		return nil, err
	}
	return res, nil

}
