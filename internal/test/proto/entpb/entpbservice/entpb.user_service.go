// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	context "context"
	gen "entgo.io/ent/entc/gen"
	ent "github.com/yoshino-s/entproto/internal/test/ent"
	user "github.com/yoshino-s/entproto/internal/test/ent/user"
	entpb "github.com/yoshino-s/entproto/internal/test/proto/entpb"
	entpbconnect "github.com/yoshino-s/entproto/internal/test/proto/entpb/entpbconnect"
	runtime "github.com/yoshino-s/entproto/runtime"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// UserService implements $connectHandler
type UserService struct {
	*runtime.BaseService
	*ent.Client
}

var _ entpbconnect.UserServiceHandler = (*UserService)(nil)

// NewUserService returns a new UserService
func NewUserService(client *ent.Client) *UserService {
	return &UserService{
		BaseService: runtime.NewBaseService(),
		Client:      client,
	}
}

// Create implements UserServiceServer.Create
func (svc *UserService) Create(ctx context.Context, req *connect.Request[entpb.User]) (*connect.Response[entpb.User], error) {
	user := req.Msg
	m, err := svc.createBuilder(user)
	if err != nil {
		return nil, err
	}

	if err := svc.RunHooks(ctx, runtime.ActionCreate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoUser(m.Save(ctx)))

}

// Get implements UserServiceServer.Get
func (svc *UserService) Get(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[entpb.User], error) {

	query := svc.Client.User.Query()
	query = query.Where(
		user.ID(int(req.Msg.Value)),
	)

	if err := svc.RunHooks(ctx, runtime.ActionGet, req, query); err != nil {
		return nil, err
	}
	return runtime.WrapResult(WrapProtoUser(query.First(ctx)))

}

// Update implements UserServiceServer.Update
func (svc *UserService) Update(ctx context.Context, req *connect.Request[entpb.User]) (*connect.Response[entpb.User], error) {
	user := req.Msg
	userID := int(user.GetId())
	m := svc.Client.User.UpdateOneID(userID)
	if user.GetDescription() != nil {
		userDescription := user.GetDescription().GetValue()
		m.SetDescription(userDescription)
	}
	userGender := toEntUser_Gender(user.GetGender())
	m.SetGender(userGender)
	if user.GetGroupId() != nil {
		userGroupID := int(user.GetGroupId().GetValue())
		m.SetGroupID(userGroupID)
	}
	userName := user.GetName()
	m.SetName(userName)
	if user.GetGroup() != nil {
		userGroup := int(user.GetGroup().GetId())
		m.SetGroupID(userGroup)
	}

	if err := svc.RunHooks(ctx, runtime.ActionUpdate, req, m); err != nil {
		return nil, err
	}

	return runtime.WrapResult(WrapProtoUser(m.Save(ctx)))

}

// Delete implements UserServiceServer.Delete
func (svc *UserService) Delete(ctx context.Context, req *connect.Request[wrapperspb.Int32Value]) (*connect.Response[emptypb.Empty], error) {

	query := svc.Client.User.DeleteOneID(int(req.Msg.Value))
	if err := svc.RunHooks(ctx, runtime.ActionDelete, req, query); err != nil {
		return nil, err
	}

	if err := query.Exec(ctx); err != nil {
		return nil, wrapError(err)
	}
	return connect.NewResponse(&emptypb.Empty{}), nil

}

// List implements UserServiceServer.List
func (svc *UserService) List(ctx context.Context, req *connect.Request[entpb.ListUserRequest]) (*connect.Response[entpb.ListUserResponse], error) {

	query, totalQuery, err := svc.BuildListQuery(req)
	if err := svc.RunHooks(ctx, runtime.ActionList, req, query); err != nil {
		return nil, err
	}
	if err := svc.RunHooks(ctx, runtime.ActionListCount, req, totalQuery); err != nil {
		return nil, err
	}

	if err != nil {
		return nil, wrapError(err)
	}

	items, err := WrapProtoUserList(query.All(ctx))
	if err != nil {
		return nil, wrapError(err)
	}
	total, err := totalQuery.Count(ctx)
	if err != nil {
		return nil, wrapError(err)
	}

	return connect.NewResponse(&entpb.ListUserResponse{
		Items: items,
		Total: int32(total),
	}), nil

}

// List implements UserServiceServer.List
func (svc *UserService) BuildListQuery(req *connect.Request[entpb.ListUserRequest]) (*ent.UserQuery, *ent.UserQuery, error) {

	snake := gen.Funcs["snake"].(func(string) string)

	query := svc.Client.User.Query()
	totalQuery := svc.Client.User.Query()

	if !req.Msg.NoLimit {
		if req.Msg.Limit != nil && req.Msg.Limit.Value > 0 {
			query = query.Limit(int(req.Msg.Limit.Value))
		} else { // If no limit, set default limit
			query = query.Limit(10)
		}
	}
	if req.Msg.Offset != nil {
		query = query.Offset(int(req.Msg.Offset.Value))
	}
	if req.Msg.Order != nil {
		OrderFunc := ent.Asc
		if req.Msg.Descending {
			OrderFunc = ent.Desc
		}
		query = query.Order(OrderFunc(snake(req.Msg.Order.Value)))
	}

	if req.Msg.Filter != nil {
	}

	return query, totalQuery, nil

}

func (svc *UserService) createBuilder(user *entpb.User) (*ent.UserCreate, error) {
	m := svc.Client.User.Create()
	userCreatedAt := runtime.ExtractTime(user.GetCreatedAt())
	m.SetCreatedAt(userCreatedAt)
	if user.GetDescription() != nil {
		userDescription := user.GetDescription().GetValue()
		m.SetDescription(userDescription)
	}
	userGender := toEntUser_Gender(user.GetGender())
	m.SetGender(userGender)
	if user.GetGroupId() != nil {
		userGroupID := int(user.GetGroupId().GetValue())
		m.SetGroupID(userGroupID)
	}
	userName := user.GetName()
	m.SetName(userName)
	if user.GetGroup() != nil {
		userGroup := int(user.GetGroup().GetId())
		m.SetGroupID(userGroup)
	}
	return m, nil
}
