// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	errors "github.com/go-errors/errors"
	ent "github.com/yoshino-s/entproto/internal/test/ent"
	user "github.com/yoshino-s/entproto/internal/test/ent/user"
	entpb "github.com/yoshino-s/entproto/internal/test/proto/entpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	regexp "regexp"
	strings "strings"
)

var protoIdentNormalizeRegexpUser_Gender = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeUser_Gender(e string) string {
	return protoIdentNormalizeRegexpUser_Gender.ReplaceAllString(e, "_")
}

func toProtoUser_Gender(e user.Gender) entpb.User_Gender {
	if v, ok := entpb.User_Gender_value[strings.ToUpper("GENDER_"+protoIdentNormalizeUser_Gender(string(e)))]; ok {
		return entpb.User_Gender(v)
	}
	return entpb.User_Gender(0)
}

func toEntUser_Gender(e entpb.User_Gender) user.Gender {
	if v, ok := entpb.User_Gender_name[int32(e)]; ok {
		entVal := map[string]string{
			"GENDER_MALE":   "male",
			"GENDER_FEMALE": "female",
		}[v]
		return user.Gender(entVal)
	}
	return ""
}

// ToProtoUser transforms the ent type to the pb type
func ToProtoUser(e *ent.User) (*entpb.User, error) {
	v := &entpb.User{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	description := wrapperspb.String(e.Description)
	v.Description = description
	gender := toProtoUser_Gender(e.Gender)
	v.Gender = gender
	group := wrapperspb.Int32(int32(e.GroupID))
	v.GroupId = group
	id := int32(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	if edg := e.Edges.Group; edg != nil {
		x, err := ToProtoGroup(edg)
		if err != nil {
			return nil, err
		}
		v.Group = x
	}
	return v, nil
}

func WrapProtoUser(e *ent.User, err error) (*entpb.User, error) {
	switch {
	case err == nil:
		return ToProtoUser(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}

// ToProtoUserList transforms a list of ent type to a list of pb type
func ToProtoUserList(e []*ent.User) ([]*entpb.User, error) {
	var pbList []*entpb.User
	for _, entEntity := range e {
		pbEntity, err := ToProtoUser(entEntity)
		if err != nil {
			return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

func WrapProtoUserList(e []*ent.User, err error) ([]*entpb.User, error) {
	switch {
	case err == nil:
		return ToProtoUserList(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}
